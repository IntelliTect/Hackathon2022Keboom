@using Keboom.Shared

<h1>Minefield</h1>

<div style="flex-grow: 4;">
    <div style="--columns: @GameState?.Board?.Width; --rows: @GameState?.Board?.Height" class="minefield">
        @for (int row = 0; row < GameState?.Board?.Height; row++)
        {
            @for (int col = 0; col < GameState?.Board?.Width; col++)
            {
                var board = GameState!.Board!;
                BoardSpace space = board[col, row];
                if (space.ClaimedByPlayer is null)
                {
                    <button class="cell" @onclick="@(_ => OpenCell(space))">
                    </button>
                }
                else
                {
                    <button class="cell">
                        @if (space.HasMine)
                        {
                            <img src="@GetPlayerFlag(space.ClaimedByPlayer)" alt="flag" />
                        }
                        else
                        {
                            @space.AdjacentMines
                        }
                    </button>
                }
            }
        }

    </div>
</div>

@code
{
    [CascadingParameter(Name = "GameState")]
    public GameState? GameState { get; set; }

    private void OpenCell(BoardSpace space)
    {
        if (GameState is { } gameState &&
            gameState.CurrentPlayer is { } currentPlayer)
        {
            GameEngine flower = new(gameState, currentPlayer);
            if (flower.TriggerSpace(space))
            {
                StateHasChanged();
            }
            else
            {
                gameState.NextPlayersTurn();
            }
        }
    }

    private string GetPlayerFlag(string playerId)
    {
        if (GameState is { } gameState && playerId is not null)
        {
            return gameState.Players.Select(x => x?.Id)
                    .ToList()
                    .IndexOf(playerId) switch
            {
                0 => "RedFlag.gif",
                1 => "YellowFlag.gif",
                2 => "GreenFlag.gif",
                3 => "BlueFlag.gif",
                _ => throw new NotImplementedException()
            };
        }
        throw new InvalidOperationException();
    }
}
